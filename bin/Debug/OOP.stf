Як правильно структурувати проєкт в Unity: що треба і не треба робити

Всім привіт! Мене звати Максим, я Unity Developer в Pingle Game Studio. У цій статті я хочу поговорити про структуру проєкту в Unity.

Добре структурований проєкт має ряд переваг. У першу чергу — зручність. Зручність для розробника, який його почав, для команди, яка буде підтримувати продукт через 3 роки, команди техартів, яким треба оптимізувати текстури під нову платформу, геймдизайнерам, що коригують баланс гри, та багатьом іншим людям, причетним до розробки. Тобто, якщо ви читаєте про структуру проєкту «як для програміста», зазвичай все зводиться до ООП, інтерфейсів, патернів та подібного. При розробці на Unity важливо усе, тому що саунд-дизайнер чи художник навряд оцінить красу коду — а ось те, що картинки та звуки розміщуються в логічному місті, а ієрархія на сцені дозволяє легко та без головного болю додавати чи заміняти контент, приймуть з радістю. Іншими словами, зручна структура веде до економії часу, грошей, та нервових клітин.

Що ми розуміємо під структурою проєкту? Я б виділив 3 розділи:

    Структура коду;
    Структура папок проєкту;
    Структура в ієрархії сцени.

І далі йдемо докладніше
Структура коду

Є базові поради та найголовніша з них...не тупити :) База тому і називається базою, що важко порекомендувати щось НЕ очевидне. Далі мої особисті поради:

    Завжди залишати коментарі. Це зараз зрозуміло, що зробити цим кодом. А через рік? А чи зрозуміють інші розробники?
    Не забувати про ООП та SOLID. Звісно бувають ситуації коли важко писати «чистий код». Але дотримання цих принципів надалі полегшить роботу над проєктом і зменшить вірогідність появи багів.
    GIT або інший репозиторій — це найкращий друг) За можливості треба робити коміти якнайчастіше. Якщо необхідно, використовувати різні гілки. Таким чином, можна побачити, як самі мислили та куди це привело код, і також як розмірковували інші. Наприклад, якщо щось зламалось у системі аутлайнів, хоча раніше вони працювали.

Але все це загальні поради, які підходять до майже будь-якої мови програмування. Тому перейдемо до більш специфічних для Unity. Що ж, почнемо з самого початку... з папок проєкту.
Папки проєкту

На початку проєкту зазвичай є лише ідея, у кращому випадку — ще хоч якийсь дизайн-документ. Тому, на перших етапах розробки, можна бачити творчий бедлам у проєкті. Папки створюються, змінюються, переносяться, перейменовуються і так далі. Звісно, цей хаос несе проблеми, які з’їдають час та нерви. Але з досвідом, кількома великими проєктами, та з десяток малих геймджем/інді-ігор позаду, формуються звички, корисні для старту нового проєкту. Серед них, наприклад, створення папок Images, Scripts, Scenes, Sound, Prefabs по дефолту. Більш того, картинка, яка показує, скільки залишилося здоров’я, не піде відразу до папки Images, її шлях має бути трошки складнішим, по типу Images/Character/UI/HPBar. Звісно, так само треба робити з іншими префабами проєкту.

Це все цікаво, але на біса воно нам треба? Ви звісно скажете «Добре, я не буду пхати усі файли у кореневу папку, та дійсно поділю скрипти окремо, а картинки окремо. Але нащо мені створювати 5-6 папок, одна в одній?» І ось тут ми й приходимо до основного питання необхідності архітектури. А точніше, що буде, якщо її ігнорувати. Це призведе до втрати інтуїтивності. Коли нова людина знайомиться з проєктом та хоче подивитись, як у ньому реалізована клієнт-серверна архітектура, звісно, вона полізе її шукати в окремій папці. Зазвичай, це не один файл, скоріш — низка файлів, де ми можемо бачити реалізації для клієнта, хоста, особливості стіма та окремі — для консолей.

Кажучи про коректне ведення папок, неможливо не згадати про неймінг. Звісно, тут працюють правила з неймінгом для назв у програмуванні. Назва повинна відображати те, чим являється файл і таке інше...Але це все в ідеальному світі. Існує проблема у великих проєктах: наприклад, є аватарки юнітів (припустимо, це 50 картинок розміром 34 на 34 пікселі). Вони знаходяться у папці Assets/Images/Units/MiniAvatar та пронумеровані 1, 2, 3...49, 50. 